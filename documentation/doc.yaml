active_version: 1.4  
image_arguments:
  - argument: --configmap
    description: Sets the ConfigMap object that defines global settings for the ingress controller. An empty ConfigMap is deployed by default and you can see its name by calling <code>kubectl get configmaps</code>. You can either override the default ConfigMap with your own object that uses the same name, or you can set this argument to point to a different ConfigMap. See the ConfigMap Options to learn which values you can store in the ConfigMap.
    values: 
      - The name of the ConfigMap that contains global settings. Defaults to `default/haproxy-configmap`
    default: default/haproxy-configmap
    version_min: "1.4"
    example: |-
      args:
        - --configmap=default/my-configmap
  - argument: --configmap-tcp-services
    tip:
      - Ports of TCP services should be exposed on the controller's kubernetes service
    description: |- 
      Sets the ConfigMap that contains mappings for TCP services to proxy through the ingress controller. This ConfigMap contains mappings like this:
        <pre>apiVersion: v1
        kind: ConfigMap
        metadata:
          name: tcp
          namespace: default
        data:
          3306:              # Port where the frontend is going to listen to.
            tcp/mysql:3306   # Kubernetes service to use for the backend.
          389:
            tcp/ldap:389:ssl # ssl option will enable ssl offloading for target service.
          6379:
            tcp/redis:6379
        </pre>
    values:
      - The name of the ConfigMap that contains mappings for TCP services
    version_min: "1.4"
    example: |-
      args:
        - --configmap-tcp-services=default/my-tcpservices-configmap
  - argument: --default-backend-service
    description: The name of the Kubernetes service to send requests to when no Ingress rules match.
    values:
      - The name of the backend service
    version_min: "1.4"
    example: |-
      args:
        - --default-backend-service=default/my-default-service
  - argument: --default-ssl-certificate
    description: The name of a TLS Secret that contains the certificate to use for SSL/TLS traffic. This can be overridden with the <code>ssl-certificate</code> setting.
    values:
      - The name of the TLS Secret
    version_min: "1.4"
    example: |-
      args:
        - --default-ssl-certificate=default/my-tls
  - argument: --ingress.class
    description: A name to assign to the ingress controller so that Ingress objects can target it apart from other running ingress controllers.
    values:
      - The name of the ingress class
    version_min: "1.4"
    example: |-
      args:
        - --ingress.class=haproxy
    helm: |-
      helm install intranet haproxytech/kubernetes-ingress \
        --set controller.ingressClass=haproxy
  - argument: --namespace-blacklist
    description: Namespaces that the ingress controller should not monitor for changes to pods and services.
    values:
      - The namespace to exclude from monitoring; You can specify this argument multiple times
    version_min: "1.4"
    example: |-
      args:
          - --namespace-blacklist=foo
          - --namespace-blacklist=bar
      helm: |-
        helm install haproxy haproxytech/kubernetes-ingress \
          --set-string "controller.extraArgs={--namespace-blacklist=foo}"
  - argument: --namespace-whitelist
    description: Namespaces that the ingress controller should monitor for changes to pods and service.
    values:
      - The namespace to monitor; You can specify this argument multiple times
    version_min: "1.4"
    example: |-
      args:
        - --namespace-whitelist=foo
        - --namespace-whitelist=bar
    helm: |-
      helm install haproxy haproxytech/kubernetes-ingress \
        --set-string "controller.extraArgs={--namespace-whitelist=foo}"
  - argument: --publish-service
    description: Copies the ingress controller's IP address to the 'Address' field in all Ingress objects that the controller manages. This is useful for tools like external-dns, which use this information to create DNS records.
    values:
      - Name of the ingress controller's service, e.g. default/kubernetes-ingress
    version_min: "1.4"    
    example: |-
      args:
        - --publish-service=default/kubernetes-ingress
  - argument: --sync-period
    description: The interval at which the controller syncs its configuration with updated Kubernetes objects.
    values:
      - An integer with unit of time (1s = 1 second, 1m = 1 minute, 1h = 1 hour); Defaults to 5s
    default: 5s
    version_min: "1.4"    
    example: |-
      args:
        - --sync-period=10s
    helm: |-
      helm install haproxy haproxytech/kubernetes-ingress \
        --set-string "controller.extraArgs={--sync-period=10s}"
  - argument: --cache-resync-period
    description: Sets the default re-synchronization period at which the controller will re-apply the desired state.
    values:
      - The duration in <code>time.Duration</code> format; Defaults to 10m (10 minutes).
    default: 10m
    version_min: "1.5"
    example: |-
      args:
        - --cache-resync-period=30m 

  - argument: --log
    description: The level of logging to perform; Defaults to <i>info</i>
    values:
      - error
      - warning
      - info (default)
      - debug
      - trace
    default: info
    version_min: "1.4"
    example: |-
      args:
        - --log=debug
    helm: |-
      helm install haproxy haproxytech/kubernetes-ingress \
        --set controller.logging.level=debug
groups:
  cookie-persistence:
    header: |-
      - Configure sticky session via cookie-based persistence.
    footer: |-
      Configuring the cookie can be done in two different ways: 
      - Using cookies annotations:
        - `cookie-domain <string>`
        - `cookie-dynamic <"true","false">`
        - `cookie-httponly <"true","false">`
        - `cookie-indirect <"true","false">`
        - `cookie-maxidle <int>`
        - `cookie-maxlife <int>`
        - `cookie-nocache <"true","false">`
        - `cookie-postonly <"true","false">`
        - `cookie-preserve <"true","false">`
        - `cookie-secure <"true","false">`
        - `cookie-type <"rewrite", "insert", "prefix">`
      - Using `config-snippet` [annotation](#config-snippet):
        
        ```yaml
        config-snippet: |
            cookie SRV insert indirect nocache              
        ```

      More information can be found in the official HAProxy [documentation](https://cbonte.github.io/haproxy-dconv/2.0/configuration.html#4-cookie)
  https:
    header: |-
      - HAProxy will decrypt/offload HTTPS traffic if certificates are defined.
      - Certificate can be defined in Ingress object: `spec.tls[].secretName`. Please see [tls-secret](#tls-secret) for format     
  access-control:
    header: |-
      - Access control is disabled by default
      - Access control can be set for all traffic (annotation on configmap) or for a set of hosts (annotation on ingress)
  tls-secret:
    header: |
      - can be defined through pod arguments `--default-ssl-certificate`=\<namespace\>/\<secret\>
      - certificate can be defined in Ingress object: spec.tls[].secretName
    footer: |
      - single certificate secret can contain two items:
        - tls.key
        - tls.crt
      - certificate secret with `rsa` and `ecdsa` certificates:
        - :information_source: only one certificate (rsa/ecdsa) is also acceptable setup
        - rsa.key
        - rsa.crt
        - ecdsa.key
        - ecdsa.crt    
annotations:
  - title: blacklist
    type: IPs or CIDRs
    group: access-control
    dependencies: ""
    default: ""
    description:
    - Blocks given IP addresses and/or IP address ranges.
    tip: []
    values:
    - Comma-separated list of IP addresses and/or CIDR ranges
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example: ['blacklist: "192.168.1.0/24, 192.168.2.100"']
  - title: check
    type: bool
    group: backend-checks
    dependencies: ""
    default: "true"
    description:
    - Enables TCP level health checks on pods and attempts a TCP connection periodically.
    tip: []
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['check: "true"']
  - title: check-http
    type: string
    group: backend-checks
    dependencies: check
    default: ""
    description:
    - Enables HTTP level health checks on pods and sends an HTTP request periodically.
      The `check` setting must be true.
    tip: []
    values:
    - URI to make HTTP requests to, e.g. `/health`
    - URI with method, e.g. `HEAD /health`
    - URI, method and HTTP version, e.g. `HEAD /health HTTP/1.1`
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example:
    - 'check: "true"'
    - 'check-http: "/health"'
  - title: check-interval
    type: '[time](#time)'
    group: backend-checks
    dependencies: check
    default: ""
    description:
    - Sets the interval between health checks when `check` is enabled.
    tip: []
    values:
    - Integer with time unit suffix (1m = 1 minute, 10s = 10 seconds)
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example:
    - 'check: "true"'
    - 'check-interval: "1m"'
  - title: config-snippet
    type: string
    group: config-snippet
    dependencies: ""
    default: ""
    description:
    - Defines a group of configuration directives to add directly to the HAProxy configuration.
      When used in a ConfigMap, directives are added to the `global` section.
      When used in an Ingress or Service, directives are added to the specific `backend`
      section.
    tip: []
    values:
    - One or more valid HAProxy directives
    applies_to:
    - configmap 
    - ingress
    - service
    version_min: "1.5"
    example_configmap: |-
      config-snippet: |
        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
        ssl-default-bind-ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-CHACHA20-POLY1305-SHA256:EECDH+AESGCM:EECDH+CHACHA20
        tune.ssl.default-dh-param 2048
        tune.bufsize 32768
    example_ingress: |-
      config-snippet: |
        http-send-name-header x-dst-server
        stick-table type string len 32 size 100k expire 30m
        stick on req.cook(sessionid)
    example_service: |- 
      config-snippet: |
        http-send-name-header x-dst-server
        stick-table type string len 32 size 100k expire 30m
        stick on req.cook(sessionid)
  - title: cookie-persistence
    type: string
    group: cookie-persistence
    dependencies: ""
    default: ""
    description:
    - Enables persistent connections between a client and a pod by inserting a cookie
      into the client's browser that is used to remember which backend pod they connected
      to before.
    tip: []
    values:
    - A name for the cookie
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['cookie-persistence: "mycookie"']
  - title: dontlognull
    type: bool
    group: logging
    dependencies: ""
    default: "true"
    description:
    - Do not log connections that sends no data, which can happen with monitoring systems.
    tip: []
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['dontlognull: "true"']
  - title: forwarded-for
    type: bool
    group: x-forwarded-for
    dependencies: ""
    default: "true"
    description:
    - Adds the X-Forwarded-For HTTP header to requests to capture and relay the client's
      source IP address to backend pods.
    tip: []
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['forwarded-for: "true"']
  - title: http-keep-alive
    type: bool
    group: http-options
    dependencies: ""
    default: "true"
    description:
    - Enables HTTP Keep-Alive both from the client to HAProxy and from HAProxy to the
      backend.
    tip: []
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['http-keep-alive: "true"']
  - title: http-server-close
    type: bool
    group: http-options
    dependencies: ""
    default: "false"
    description:
    - Disables HTTP Keep-Alive between HAProxy and the backend, while allowing it to
      stay enabled from the client to HAProxy.
    tip: []
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['http-server-close: "true"']
  - title: ingress.class
    type: string
    group: ingress class
    dependencies: ""
    default: ""
    description:
    - Targets an ingress controller by class name for this ingress to use.
    tip:
    - Any ingress object which have class specified and its different from one defined
      in [image arguments](controller.md) will be ignored
    - 'default: "" - all ingress objects are monitored'
    values:
    - The ingress class name
    applies_to:
    - ingress
    version_min: "1.4"
    example: ['ingress.class: "haproxy"']
  - title: load-balance
    type: string
    group: balance-algorithm
    dependencies: ""
    default: roundrobin
    description:
    - Sets the load-balancing algorithm to use.
    tip: []
    values:
    - roundrobin
    - static-rr
    - leastconn
    - first
    - source
    - uri
    - url_param
    - hdr([name])
    - random
    - random([draws])
    - rdp-cookie
    - rdp-cookie([name])
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['load-balance: "leastconn"']
  - title: log-format
    type: string
    group: log-format
    dependencies: ""
    default: ""
    description:
    - Sets the log format string to use for HTTP traffic.
    tip:
    - 'Default log-format is: `%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC
      %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs \"%HM %[var(txn.base)] %HV\"` Which
      will look like this: `10.244.0.1:5793 [10/Apr/2020:10:32:50.132] https~ test-echo1-8080/SRV_TFW8V
      0/0/1/2/3 200 653 - - ---- 1/1/0/0/0 0/0 "GET test.k8s.local/ HTTP/2.0`'
    values:
    - Log format string. More information in [HAProxy documentation](https://cbonte.github.io/haproxy-dconv/2.0/configuration.html#8.2.3)
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['log-format: "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs \"%HM %[var(txn.base)] %HV\""']
  - title: logasap
    type: bool
    group: logging
    dependencies: ""
    default: "false"
    description:
    - Logs request and response data as soon as the server returns a complete set of
      HTTP response headers, instead of waiting for the response to finish sending all
      data.
    tip: []
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['logasap: "true"']
  - title: maxconn
    type: number
    group: maximum-concurrent-connections
    dependencies: ""
    default: ""
    description:
    - Sets the maximum number of concurrent connections that HAProxy will accept.
    tip: []
    values:
    - An integer setting the allowed number of concurrent connections
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['maxconn: "2000"']
  - title: nbthread
    type: number
    group: number-of-threads
    dependencies: ""
    default: ""
    description:
    - Sets the number of worker threads that the HAProxy process will start. If not
      set, HAProxy will create a thread for each available processor.
    tip: []
    values:
    - An integer setting the number of worker threads
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['nbthread: "8"']
  - title: path-rewrite
    type: string
    group: path-rewrite
    dependencies: ""
    default: ""
    description:
    - Replaces the entire URL path with the given value.
    tip: []
    values:
    - A single path, such as "/", to turn any path into "/"
    - Two parameters. A regular expression to match and a path to replace it with.
    applies_to:
    - ingress
    - service
    version_min: "1.4"
    example:
    - 'path-rewrite: "/"                        # replace all paths with /'
    - 'path-rewrite: (.*) /foo\1                # add the prefix /foo... "/bar?q=1" into "/foo/bar?q=1"'
    - 'path-rewrite: ([^?]*)(\?(.*))? \1/foo\2  # add the suffix /foo ... "/bar?q=1" into "/bar/foo?q=1"'
    - 'path-rewrite: /foo/(.*) /\1              # strip /foo ... "/foo/bar?q=1" into "/bar?q=1"'
  - title: pod-maxconn
    type: number
    group: maximum-concurrent-backend-connections
    dependencies: ""
    default: ""
    description:
    - Sets the maximum number of concurrent backend connections allowed.
    tip: []
    values:
    - An integer setting the maximum number of concurrent backend connections
    applies_to:
    - service
    version_min: "1.4"
    example: ['pod-maxconn: 30']
  - title: proxy-protocol
    type: IPs or CIDRs
    group: proxy-protocol
    dependencies: ""
    default: ""
    description:
    - Enables Proxy Protocol for a comma-delimited list of IP addresses and/or CIDR
      ranges.
    tip:
    - Connection will fail with 400 Bad Request if source IP is in annotation list but
      no Proxy Protocol data is sent.
    values:
    - A list of IP addresses and/or CIDR ranges
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['proxy-protocol: "192.168.1.0/24, 192.168.2.100"']
  - title: rate-limit-period
    type: '[time](#time)'
    group: rate-limit
    dependencies: ""
    default: 1s
    description:
    - Sets the period of time over which requests are tracked for a given source IP
      address.
    tip: []
    values:
    - Integer with unit of time (1s = 1 second, 1m = 1 minute); Defaults to 1 second
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example: ['rate-limit-period: "1m"']
  - title: rate-limit-requests
    type: number
    group: rate-limit
    dependencies: ""
    default: ""
    description:
    - Sets the maximum number of requests that will be accepted from a source IP address
      during the `rate-limit-period`.
    tip:
    - If this number is exceeded, HAProxy will deny requests with 403 status code
    values:
    - An integer representing the maximum number of requests to accept
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example: ['rate-limit-requests: 15']
  - title: rate-limit-size
    type: string
    group: rate-limit
    dependencies: rate-limit
    default: 100k
    description:
    - Sets how many source IP addresses to track, after which older entries are replaced
      by new entries.
    tip:
    - If this number is exceeded, older entries will be dropped as new ones come
    values:
    - An integer defining how many IP addresses to track for rate limiting; Defaults
      to 100,000
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['rate-limit-size: 1000000']
  - title: request-capture
    type: '[sample expression](#sample-expression)'
    group: request-capture
    dependencies: ""
    default: ""
    description:
    - When you include *%hr* in the `log-format` string, which is included in
      the default log format, it captures custom information in the logs, which you
      define with this field. For example, you can capture specific cookie values or
      HTTP header values.
    tip:
    - Captures samples of the request using [sample expression](#sample-expression) 
      and log them in HAProxy traffic logs.
    values:
    - A header value, e.g. `hrd(header-name)`
    - A cookie value, e.g. `cookie(cookie-name)`
    - Multiple expressions by using a multiline YAML string
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example_configmap: |-
      # capture a single value
      request-capture: cookie(my-cookie)
  
      # capture multiple values
      request-capture: |
        cookie(my-cookie)
        hdr(Host)
        hdr(User-Agent)
    example_ingress: |-
      # capture a single value
      haproxy.org/request-capture: cookie(my-cookie)
  
      # capture multiple values
      haproxy.org/request-capture: |
        cookie(my-cookie)
        hdr(Host)
        hdr(User-Agent)
  - title: request-capture-len
    type: number
    group: request-capture
    dependencies: ""
    default: "128"
    description:
    - Sets how many characters to allocate for fields captured by `request-capture`.
    tip: []
    values:
    - An integer representing the number of characters for captured fields; Defaults
      to 128
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example:
    - 'request-capture: cookie(my-cookie)'
    - 'request-capture-len: 350'
  - title: request-set-header
    type: string
    group: request-set-header
    dependencies: ""
    default: ""
    description:
    - Sets an HTTP header in the request before it is passed to the backend service.
    tip:
    - This sets header before HAProxy does any service/backend dispatch. So in the case
      you want to change the Host header this will impact HAProxy decision on which
      service/backend to use (based on matching Host against ingress rules). In order 
      to set the Host header after service selection, use [set-host](#set-host) annotation.
    values:
    - The name of the field, following by its value, e.g. Ingress-ID abcd123
    - Multiple headers can be set using a multilane YAML string
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example_configmap: |-
      # single header
      request-set-header: Ingress-ID abcd123
  
      # multiple headers
      request-set-header: |
        Ingress-ID abcd123
        Another-Header 12345
    example_ingress: |-
      # single header
      haproxy.org/request-set-header: Ingress-ID abcd123
    
      # multiple headers
      haproxy.org/request-set-header: |
        Ingress-ID abcd123
        Another-Header 12345
  - title: response-set-header
    type: string
    group: response-set-header
    dependencies: ""
    default: ""
    description:
    - Sets an HTTP header in the response before it is passed to the client.
    tip: []
    values:
    - The name of the field, following by its value, e.g. Cache-Control "no-store,no-cache,private"
    - Multiple headers can be set using a multiline YAML string
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example_configmap: |-
      # single header
      response-set-header: Cache-Control "no-store,no-cache,private"
  
      # multiple headers
      response-set-header: |
        Cache-Control "no-store,no-cache,private"
        Strict-Transport-Security "max-age=31536000"
    example_ingress: |-
      # single header
      haproxy.org/response-set-header: Cache-Control "no-store,no-cache,private"
    
      # multiple headers
      haproxy.org/response-set-header: |
        Cache-Control "no-store,no-cache,private"
        Strict-Transport-Security "max-age=31536000"
  - title: send-proxy-protocol
    type: '["proxy", "proxy-v1", "proxy-v2", ""]'
    group: send-proxy-protocol
    dependencies: ""
    default: ""
    description:
    - Uses the PROXY Protocol when connecting to backend servers.
    tip: []
    values:
    - proxy - Uses PROXY v1
    - proxy-v1 - Uses PROXY v1
    - proxy-v2 - Uses PROXY v2
    applies_to:
    - service
    version_min: "1.5"
    example: ['send-proxy-protocol: proxy-v2']
  - title: server-ssl
    type: bool
    group: server-ssl
    dependencies: ""
    default: "false"
    description:
    - Enables SSL to pods.
    tip:
    - Enable HTTP/2 support for backend severs.
    - Current implementation does not verify server certificates
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['server-ssl: "true"']
  - title: set-host
    type: string
    group: set-host
    dependencies: ""
    default: ""
    description:
    - Sets the Host header to send to backend services.
    tip: []
    values:
    - The value of the Host header
    applies_to:
    - ingress
    - service
    version_min: "1.4"
    example: ['set-host: "example.local"']
  - title: servers-increment
    type: number
    group: servers-slots-increment
    dependencies: ""
    default: "42"
    description:
    - Sets the number of disabled servers to add to the backend in order for the controller
      to insert new pods dynamically without a reload. When the ingress controller creates
      new pods and there are not enough disabled servers standing by, it adds X new
      disabled servers, where X is specified here.
    tip: []
    values:
    - Integer value indicating the number of disabled servers to add. Defaults to 42.
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['servers-increment: 75']
  - title: ssl-certificate
    type: string
    group: tls-secret
    dependencies: ""
    default: ""
    description:
    - Sets the name of the Kubernetes secret that contains both the TLS key and certificate.
    tip: 
    - this replaces default certificate
    values:
    - Name of Kubernetes secret
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['ssl-certificate: "default/tls-secret"']
  - title: ssl-passthrough
    type: bool
    group: https
    dependencies: ""
    default: "false"
    description:
    - Passes SSL/TLS traffic through at Layer 4 directly to the backend service without
      Layer 7 inspection.
    tip:
    - Traffic is proxied in TCP mode which makes unavailable a number of the controller
      annotations (requiring HTTP mode).
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['ssl-passthrough: "true"']
  - title: ssl-redirect
    type: bool
    group: https
    dependencies: tls-secret
    default: "false"
    description:
    - Sets whether to redirect traffic from HTTP to HTTPS. By default, this is activated
      when `ssl-certificate` is set.
    tip:
    - if TLS is enabled, by default, the controller redirects (302) to HTTPS.
    - Automatic redirects, when TLS enabled, can be disabled by setting annotation to
      "false" in configmap
    values:
    - "true"
    - "false"
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example:
    - 'ssl-redirect: "false"'
    - 'ssl-certificate: "default/tls-secret"'
  - title: ssl-redirect-code
    type: '[301, 302, 303]'
    group: https
    dependencies: tls-secret
    default: "302"
    description:
    - Sets the HTTP status code to use when `ssl-redirect` is true.
    tip: []
    values:
    - "301"
    - "302"
    - "303"
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example:
    - 'ssl-redirect: "true"'
    - 'ssl-certificate: "default/tls-secret"'
    - 'ssl-redirect-code: "301"'
  - title: syslog-server
    type: '[syslog](#syslog-fields)'
    group: logging
    dependencies: ""
    default: 'address:127.0.0.1, facility: local0, level: notice'
    description:
    - Sets one or more Syslog servers where logs should be forwarded. Each server is
      placed onto its own line. A line supports the following arguments, which are separated
      by commas
    tip:
    - More information can be found in the [HAProxy documentation](https://cbonte.github.io/haproxy-dconv/2.0/configuration.html#3.1-log)
    values:
    - address - IP address where the syslog server is listening; **Required**; Defaults
      to 127.0.0.1.
    - facility - One of the 24 syslog facilities (kern, user, mail, daemon, auth, syslog,
      lpr, news, uucp, cron, auth2, ftp, ntp, audit, alert, con2, local0, local1, local2,
      local3, local4, local5, local6, local7); In general, you will want to use one
      of the localX values, since the others are registered for specific types of applications;
      **Required**; Defaults to local0.
    - format - Syslog format, one of the following - rfc3164, rfc5424, short, raw; Defaults
      to rfc3164.
    - length -  Maximum syslog line length; Defaults to 1024.
    - level - Maximum verbosity level to filter outgoing messages; Only messages with
      a severity at least as important as this level will be sent; Use one of the following
      - emerg, alert, crit, err, warning, notice, info, debug; Defaults to 'notice'.
    - minlevel - Minimum verbosity level. Logs emitted with a more severe level than
      this one will be capped to this level.
    - port - Port number where the syslog server is listening; Defaults to 514.
    applies_to:
    - configmap
    version_min: "1.4"
    example_configmap: |-
      # a single entry
      syslog-server: address:192.158.1.1, port:514, facility:local0
  
      # log to stdout
      syslog-server: address:stdout, format: raw, facility:daemon
  
      # multiple entries
      syslog-server: |
        address:127.0.0.1, port:514, facility:local0
        address:192.168.1.1, port:514, facility:local1
  - title: timeout-check
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: ""
    description:
    - Sets an additional check timeout, but only after a connection has been already
      established.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour)
    applies_to:
    - configmap
    - ingress
    - service
    version_min: "1.4"
    example: ['timeout-check: 5s']
  - title: timeout-client
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 50s
    description:
    - Set the maximum inactivity time on the client side.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 50s
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-client: 5s']
  - title: timeout-client-fin
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: ""
    description:
    - Sets the inactivity timeout on the client side for half-closed connections.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour)
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-client-fin: 5s']
  - title: timeout-connect
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 5s
    description:
    - Sets the maximum time to wait for a connection attempt to a server to succeed.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 5s
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-connect: 5s']
  - title: timeout-http-request
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 5s
    description:
    - Sets the maximum allowed time to wait for a complete HTTP request.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 5s
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-http-request: 5s']
  - title: timeout-http-keep-alive
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 1m
    description:
    - Sets the maximum allowed time to wait for a new HTTP request to appear.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 1m
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-http-keep-alive: 5s']
  - title: timeout-queue
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 5s
    description:
    - Sets the maximum time to wait in the queue for a connection slot to be free.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 5s
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-queue: 5s']
  - title: timeout-server
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 50s
    description:
    - Sets the maximum inactivity time on the server side.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 50s
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-server: 5s']
  - title: timeout-server-fin
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: ""
    description:
    - Sets the inactivity timeout on the server side for half-closed connections.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour)
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-server-fin: 5s']
  - title: timeout-tunnel
    type: '[time](#time)'
    group: timeouts
    dependencies: ""
    default: 1h
    description:
    - Set the maximum inactivity time on the client and server side for tunnels.
    tip: []
    values:
    - An integer with a unit of time (1 second = 1s, 1 minute = 1m, 1h = 1 hour); Defaults
      to 1h
    applies_to:
    - configmap
    version_min: "1.4"
    example: ['timeout-tunnel: 30m']
  - title: whitelist
    type: IPs or CIDRs
    group: access-control
    dependencies: ""
    default: ""
    description:
    - Sets a list of IP addresses or CIDRs to exclude from deny rules, such as rate
      limiting.
    tip: []
    values:
    - Comma-separated list of IP addresses and/or CIDR ranges
    applies_to:
    - configmap
    - ingress
    version_min: "1.4"
    example: ['whitelist: "192.168.1.0/24, 192.168.2.100"']
    